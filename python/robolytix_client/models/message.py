# coding: utf-8

"""
    Robolytix

    Robolytix is the key online analytic and monitoring tool for Robotic Process Automation using Sonar technology to evaluate, audit, monitor and improve performance of robots operating in any application, RPA platform or custom solution. Manage your RPA projects effectively with exact KPIs. Visualise your whole process at one place.  # noqa: E501

    OpenAPI spec version: 1.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class Message(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'processid': 'str',
        'runid': 'str',
        'service': 'str',
        'sonarid': 'str',
        'type': 'str'
    }

    attribute_map = {
        'name': 'name',
        'processid': 'processid',
        'runid': 'runid',
        'service': 'service',
        'sonarid': 'sonarid',
        'type': 'type'
    }

    def __init__(self, name=None, processid=None, runid=None, service=None, sonarid=None, type=None):  # noqa: E501
        """Message - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._processid = None
        self._runid = None
        self._service = None
        self._sonarid = None
        self._type = None
        self.discriminator = None
        self.name = name
        self.processid = processid
        if runid is not None:
            self.runid = runid
        if service is not None:
            self.service = service
        if sonarid is not None:
            self.sonarid = sonarid
        self.type = type

    @property
    def name(self):
        """Gets the name of this Message.  # noqa: E501

        Name of the current sonar should be unique in the whole process.  # noqa: E501

        :return: The name of this Message.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Message.

        Name of the current sonar should be unique in the whole process.  # noqa: E501

        :param name: The name of this Message.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def processid(self):
        """Gets the processid of this Message.  # noqa: E501

        List of processes in the selected account. For creating a new process go to [Robolytix settings](https://app.robolytix.com/en/admin/).  # noqa: E501

        :return: The processid of this Message.  # noqa: E501
        :rtype: str
        """
        return self._processid

    @processid.setter
    def processid(self, processid):
        """Sets the processid of this Message.

        List of processes in the selected account. For creating a new process go to [Robolytix settings](https://app.robolytix.com/en/admin/).  # noqa: E501

        :param processid: The processid of this Message.  # noqa: E501
        :type: str
        """
        if processid is None:
            raise ValueError("Invalid value for `processid`, must not be `None`")  # noqa: E501

        self._processid = processid

    @property
    def runid(self):
        """Gets the runid of this Message.  # noqa: E501

        Unique identification of one process run. Such as timestamp of first action or return value 'Run identification' from start Sonar.  # noqa: E501

        :return: The runid of this Message.  # noqa: E501
        :rtype: str
        """
        return self._runid

    @runid.setter
    def runid(self, runid):
        """Sets the runid of this Message.

        Unique identification of one process run. Such as timestamp of first action or return value 'Run identification' from start Sonar.  # noqa: E501

        :param runid: The runid of this Message.  # noqa: E501
        :type: str
        """

        self._runid = runid

    @property
    def service(self):
        """Gets the service of this Message.  # noqa: E501

        service  # noqa: E501

        :return: The service of this Message.  # noqa: E501
        :rtype: str
        """
        return self._service

    @service.setter
    def service(self, service):
        """Sets the service of this Message.

        service  # noqa: E501

        :param service: The service of this Message.  # noqa: E501
        :type: str
        """

        self._service = service

    @property
    def sonarid(self):
        """Gets the sonarid of this Message.  # noqa: E501

        sonarid  # noqa: E501

        :return: The sonarid of this Message.  # noqa: E501
        :rtype: str
        """
        return self._sonarid

    @sonarid.setter
    def sonarid(self, sonarid):
        """Sets the sonarid of this Message.

        sonarid  # noqa: E501

        :param sonarid: The sonarid of this Message.  # noqa: E501
        :type: str
        """

        self._sonarid = sonarid

    @property
    def type(self):
        """Gets the type of this Message.  # noqa: E501

        Every process should start at sonars type Start and end at sonars type End. The number of Continuous sonars is unlimited. Use Error sonars for handling errors.  # noqa: E501

        :return: The type of this Message.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Message.

        Every process should start at sonars type Start and end at sonars type End. The number of Continuous sonars is unlimited. Use Error sonars for handling errors.  # noqa: E501

        :param type: The type of this Message.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Message, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Message):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
